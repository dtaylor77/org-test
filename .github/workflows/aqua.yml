  name: Aquaservices DEV

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
jobs:
  terraform:
    name: Terraform plan & apply
    runs-on: ubuntu-latest
    environment: DEV
    env:
      DEPLOY_ENV: DEV
     # TF_VAR_CI: "true"

    steps:
      - uses: hashicorp/setup-terraform@v1
      - uses: actions/checkout@v2

      - name: Config Terraform plugin cache
        run: |
          echo 'plugin_cache_dir="$HOME/.terraform.d/plugin-cache"' >~/.terraformrc
          mkdir --parents ~/.terraform.d/plugin-cache

      - name: Cache Terraform
        uses: actions/cache@v2
        with:
          path: ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('.terraform.lock.hcl') }}

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
       #   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
       #   aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
       #   aws-region: us-east-1
           role-to-assume: ${{ secrets.AWS_ROLE }}
           aws-region: ${{ secrets.AWS_REGION }}
           role-session-name: GitHub-OIDC-TERRAFORM

      - name: Configure aws credential profile
       # run: |
       #   aws configure set default.region us-east-1
       #   aws configure set default.aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
       #   aws configure set default.aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  

      - run: aws configure list-profiles

      - name: Terraform init
        id: init
        run: |
          chmod +x ./run.sh
          ./run.sh dev init

      - name: Terraform validation
        id: validate
        run: terraform validate -no-color

      - name: Terraform plan
        id: plan
        run: terraform plan --var-file=dev.tfvars

      - uses: actions/github-script@0.9.0
        if: github.ref != 'refs/heads/develop' && github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform apply
        if: success() && github.ref == 'refs/heads/develop' && github.event_name == 'push'
        run: terraform apply --var-file=dev.tfvars
